import {Directive, ElementRef, HostListener, Input} from '@angular/core';
import {NgxEasilyDraggableService} from './ngx-easily-draggable.service';

/**
 * Directive that makes a DOM element draggable.
 */
@Directive({
  selector: '[ngxEasilyDraggable]'
})
export class NgxEasilyDraggableDirective {

  /**
   * Enable the drag image ("ghost") generated by the browser? Defaults to true. If set to false, does not render any drag image.
   * @type {boolean}
   */
  @Input() enableDragImage = true;

  /**
   * Entity that's represented by the DOM element. Will be passed to (dropped) event listeners as
   * NgxEasilyDraggableDropElement.draggedElement.representing.
   * @type {any}
   */
  @Input() representing = null;

  constructor(private elementRef: ElementRef,
              private service: NgxEasilyDraggableService) {
    this.elementRef.nativeElement.draggable = 'true';
  }

  @HostListener('dragstart', ['$event']) private dragStart(event: DragEvent) {
    this.service.draggedElement = {
      elementRef: this.elementRef,
      representing: this.representing
    };
    if (!this.enableDragImage) {
      const dragImage = new Image();
      dragImage.style.display = 'none';
      event.dataTransfer.setDragImage(dragImage, 0, 0);
    }
  }
}
